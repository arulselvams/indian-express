{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a701c464-c05e-4f3e-87f8-7a222163c373",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-08 10:57:02.941 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\HP\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-08 10:57:02.941 No runtime found, using MemoryCacheStorageManager\n",
      "2025-05-08 10:57:02.941 No runtime found, using MemoryCacheStorageManager\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import streamlit as st\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "import joblib\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "# Streamlit App Title\n",
    "st.title(\"Topic Modeling on The Indian Express News Articles\")\n",
    "\n",
    "# Load the dataset\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    data = pd.read_csv(r\"C:\\Users\\HP\\Downloads\\archive\\business_data.csv\")\n",
    "    return data\n",
    "\n",
    "data = load_data()\n",
    "\n",
    "# Display the dataset\n",
    "if st.checkbox(\"Show Dataset\"):\n",
    "    st.write(data)\n",
    "    st.write(\"Columns in the dataset:\", data.columns)  # Display column names for debugging\n",
    "\n",
    "# Check if 'Content' column exists\n",
    "if 'Content' not in data.columns:\n",
    "    st.error(\"The dataset does not contain a 'Content' column. Please check the dataset.\")\n",
    "else:\n",
    "    # Exploratory Data Analysis (EDA)\n",
    "    if st.checkbox(\"Show EDA\"):\n",
    "        st.subheader(\"Distribution of Articles by Category\")\n",
    "        fig, ax = plt.subplots()\n",
    "        sns.countplot(x='Category', data=data, ax=ax)\n",
    "        st.pyplot(fig)\n",
    "\n",
    "        # Average word counts per category\n",
    "        data['word_count'] = data['Content'].apply(lambda x: len(str(x).split()))\n",
    "        avg_word_count = data.groupby('Category')['word_count'].mean()\n",
    "        st.write(\"Average Word Count per Category:\")\n",
    "        st.write(avg_word_count)\n",
    "\n",
    "    # Text Preprocessing\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "\n",
    "    def preprocess_text(text):\n",
    "        text = text.lower()  # Convert to lowercase\n",
    "        text = re.sub(r'\\d+', '', text)  # Remove numbers\n",
    "        text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n",
    "        tokens = text.split()  # Tokenize\n",
    "        tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]  # Remove stop words and lemmatize\n",
    "        return ' '.join(tokens)\n",
    "\n",
    "    # Apply preprocessing\n",
    "    data['Processed_Content'] = data['Content'].apply(preprocess_text)\n",
    "\n",
    "    # Feature Extraction\n",
    "    tfidf_vectorizer = TfidfVectorizer(max_features=5000)\n",
    "    X = tfidf_vectorizer.fit_transform(data['Processed_Content']).toarray()\n",
    "    y = data['Category']\n",
    "\n",
    "    # Split the dataset into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "    # Model Building and Training\n",
    "    models = {\n",
    "        'Logistic Regression': LogisticRegression(),\n",
    "        'Multinomial Naive Bayes': MultinomialNB(),\n",
    "        'Random Forest': RandomForestClassifier()\n",
    "    }\n",
    "\n",
    "    # Train and evaluate models\n",
    "    if st.button(\"Train Models\"):\n",
    "        for model_name, model in models.items():\n",
    "            model.fit(X_train, y_train)\n",
    "            y_pred = model.predict(X_test)\n",
    "            \n",
    "            st.subheader(f\"Model: {model_name}\")\n",
    "            st.write(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "            st.write(classification_report(y_test, y_pred))\n",
    "            st.write(confusion_matrix(y_test, y_pred))\n",
    "\n",
    "    # Hyperparameter Tuning (Example for Random Forest)\n",
    "    if st.button(\"Hyperparameter Tuning\"):\n",
    "        param_grid = {\n",
    "            'n_estimators': [50, 100, 200],\n",
    "            'max_depth': [None, 10, 20, 30]\n",
    "        }\n",
    "\n",
    "        grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=3)\n",
    "        grid_search.fit(X_train, y_train)\n",
    "\n",
    "        st.write(\"Best parameters:\", grid_search.best_params_)\n",
    "\n",
    "        # Save the model\n",
    "        joblib.dump(grid_search.best_estimator_, 'best_random_forest_model.pkl')\n",
    "\n",
    "    # Load the model\n",
    "    model = joblib.load('best_random_forest_model.pkl')\n",
    "\n",
    "    # Generate predictions on new data\n",
    "    new_data = st.text_area(\"Enter new article text for prediction:\")\n",
    "    if st.button(\"Predict Category\"):\n",
    "        new_data_processed = [preprocess_text(new_data)]\n",
    "        new_data_features = tfidf_vectorizer.transform(new_data_processed).toarray()\n",
    "        predictions = model.predict(new_data_features)\n",
    "        st.write(\"Predicted Category:\", predictions)\n",
    "\n",
    "    # Generate classification report for the best model\n",
    "    if st.button(\"Show Final Model Report\"):\n",
    "        y_pred_final = model.predict(X_test)\n",
    "        st.write(classification_report(y_test, y_pred_final))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f2478b7-32b7-4857-bc1f-6b87430fb99b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
